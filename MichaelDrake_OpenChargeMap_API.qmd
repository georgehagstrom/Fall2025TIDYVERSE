---
title: "Tidyverse Create"
author: Michael Drake
format: pdf
editor: source
---

# Overview

In this assignment, you’ll practice collaborating around a code project with GitHub. Each student will select a website API from the list of public APIs curated on this [github repository](https://github.com/public-apis/public-apis). I recommend choosing a well documented repository which allows you to access data that you can load into R and visualize. If you know of a website with an API that isn't listed here, you may use it but be aware that this list is curated so there is a better chance that it will be easy to learn how to use the APIs on the websites listed here. I recommend choosing an API that doesn't require authentication. If authentication is required, make sure *not* to share you credentials.

Using your selected API, you will create a vignette (in the form of a `qmd` file) using the `httr2` library: <https://httr2.r-lib.org/>. This vignette should include three sections:

1.  A description of the API that you selected and the data it contains, along with a question that you are interested in exploring using the API.

**The API I selected is the Open Charge Map API, which has information about electric vehicle (EV) charging stations globally. I'm interested in seeing the distribution of EV charger operators within each neighborhood in the city of Phoenix, AZ. For this study, I limited the neighborhoods to those that have at least 25 EV chargers. Additionally, charging operators who have less than 10 total within the city of Phoenix were combined into one category labelled `Other`.**

2.  Code that uses `httr2` and other tidyverse functions which downloads the data you are interested in from the website and performs a simple visualization or analysis to address your question. Make sure to describe how your code works with the API.

```{r, fig.width=8}
library(tidyverse)
library(httr2)
library(jsonlite)
library(tibblify)

#Base URL and API Key
opencharge_url = "https://api.openchargemap.io/v3/"
api_key = Sys.getenv("api_key")

#Two Possible Endpoints
poi_url = "poi"
ref_url = "referencedata"

#Making Initial Empty Call
opencharge_req = opencharge_url |>
  request() |> req_url_query(key = api_key)

#Calling Reference Data to Find Possible Variables
reference_req = opencharge_req |>
  req_url_path_append(ref_url)

reference_data = reference_req |> req_perform() |> resp_body_json()

#Finding How to Call Only US Data
countries = reference_data$Countries |> tibblify()
countries |> head(5)
country_code = "US"

#Calling POI Data for Phoenix Using Latitude/Longitude Boundaries
poi_req = opencharge_req |>
  req_url_path_append(poi_url) |>
  req_url_query(countrycode = country_code,
                boundingbox = "(33.91890779888603, -112.33573212686191),
                (33.29394434859858, -111.92642843073307)",
                maxresults = 1000)

poi_data = poi_req |> req_perform() |> resp_body_json()

#Converting Data into a Tibble with Only Relevant Variables
operator_info = poi_data[c(1:625)] |> tibblify() |>
  unnest(OperatorInfo, names_sep = "_") |>
  unnest(AddressInfo, names_sep = "_") |>
  select(OperatorInfo_Title, AddressInfo_Town) |>
  rename("operator" = OperatorInfo_Title,
         "town" = AddressInfo_Town) |>
  filter(!is.na(operator), operator != "(Unknown Operator)")

#Combine Similar Operators
operator_info = operator_info |>
  mutate(across(operator, \(x) if_else(str_detect(x, "Blink"), 
                                       "Blink Charging", x)),
         across(operator, \(x) if_else(str_detect(x, "Tesla"), 
                                       "Tesla", x)))

#Find Top Neighborhoods for EV Chargers
top_towns = operator_info |> group_by(town) |> count() |> arrange(desc(n)) |> filter(n >= 25)
top_towns

#Find Top Operators
top_operators = operator_info |> group_by(operator) |> count() |> arrange(desc(n)) |> filter(n >= 10)
top_operators

#Generate Stacked Bar Chart
operator_info |>
  filter(town %in% top_towns$town) |>
  mutate(operator = if_else(operator %in% top_operators$operator, operator,
                            "Other")) |>
  ggplot(aes(x = town, fill = operator)) +
  geom_bar(position = "fill") +
  theme_bw() +
  scale_fill_viridis_d()
```

**The API has 2 endpoints of interest, `poi` and `referencedata`. `referencedata` was used to find the possible query parameters and what values they accepted, including the country. In addition to the country query, the API accepts a set of latitudes and longitudes to create a boundary to search within, which allowed me to limit the search to only Phoenix, AZ. Finally, the API accepts a value for maxresults, which was set to a large enough number to ensure all observations were gathered.**

3.  A conclusion section where you discuss the meaning of your visualization and/or analysis.

**Based on the stacked bar chart above, the top 5 neighborhoods in Phoenix based on the number of EV chargers they have are predominantly operated by ChargePoint, followed by Blink Charging and Tesla. Most neighborhoods have a small percentage of `Shell Recharge Solutions (US)` and `Other` operators, except for Glendale, where these operators have an equal share of the distribution as Tesla.**

**Glendale’s more dispersed distribution of EV charging operators may be due to its later adoption of electric vehicles and charging infrastructure. Because Glendale began installing chargers after central and east Phoenix, it had more options available due to a more competitive market. While early adopters had limited options dominated by a few companies such as ChargePoint, Blink, and Tesla, Glendale could choose from a broader range of newer operators that entered the market later.**

You should incorporate your vignette into a shared `github` repository which will contain all of the examples. I have created the following repository for you to use for this assignment:

<https://github.com/georgehagstrom/Fall2025TIDYVERSE>

You should clone the provided repository. In order to push code to the repository, you will need to be added as a collaborator, which requires you to send me your github username (preferably over slack). You should also update the README.md file with your example. You may want to review [Section 25 of Happy git and github for the useR](https://happygitwithr.com/common-remote-setups). The `github` repo I have setup is to be organized following the first "ours" model.

After you’ve created your vignette and uploaded it to `github`, render your pdf file and submit it along with your `github` handle to brightspace.

In several weeks, there will be a followup assignment where we will re-use the work submitted for this assignment and where you will select a vignette uploaded by one of your classmates and extend it by adding additional analyses.

If you have not yet done so, you will need to create a `github` account. There are many ways to work with `git` and `R` together, but one way I recommend is to follow the tutorial in the book [Happy git and gitHub for the useR](https://happygitwithr.com). To interface with our github repository use [section 15.2 and create a project from an existing github repository.](https://happygitwithr.com/new-github-first#new-rstudio-project-via-git)
